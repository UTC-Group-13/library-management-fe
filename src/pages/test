import React, { useEffect, useState } from "react";
import { Button, DatePicker, Form, Input, message, Modal, Popconfirm, Space, Table, } from "antd";
import { bookService } from "../api/bookService";
import { DeleteOutlined, EditOutlined, PlusOutlined } from "@ant-design/icons";
import dayjs from "dayjs";

const { Search } = Input;

export default function BookPage() {
    const [messageApi, contextHolder] = message.useMessage(); // ‚úÖ T·∫°o instance message

    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(false);
    const [pagination, setPagination] = useState({
        current: 1,
        pageSize: 10,
        total: 0,
    });
    const [keyword, setKeyword] = useState("");
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isEdit, setIsEdit] = useState(false);
    const [editingRecord, setEditingRecord] = useState(null);
    const [form] = Form.useForm();

    // === G·ªåI API PH√ÇN TRANG ===
    const fetchData = async (page = 1, size = 10, searchValue = "") => {
        setLoading(true);
        try {
            const res = await bookService.search({
                page: page - 1,
                size,
                search: searchValue || "",
                sortBy: "id",
                sortDir: "desc",
            });

            setData(res.content || []);
            setPagination({
                current: res.pageable?.pageNumber + 1 || 1,
                pageSize: res.pageable?.pageSize || 10,
                total: res.totalElements || 0,
            });
        } catch (error) {
            console.error(error);
            messageApi.error("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s√°ch");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    // === SEARCH ===
    const handleSearch = (value) => {
        setKeyword(value);
        fetchData(1, pagination.pageSize, value);
    };

    // === TH√äM M·ªöI ===
    const handleAdd = () => {
        setIsEdit(false);
        setEditingRecord(null);
        form.resetFields();
        setIsModalOpen(true);
    };

    // === S·ª¨A ===
    const handleEdit = (record) => {
        setIsEdit(true);
        setEditingRecord(record);
        form.setFieldsValue({
            ...record,
            birthDate: record.birthDate ? dayjs(record.birthDate) : null,
        });
        setIsModalOpen(true);
    };

    // === XO√Å ===
    const handleDelete = async (id) => {
        try {
            await bookService.delete(id);
            messageApi.success("üóëÔ∏è X√≥a s√°ch th√†nh c√¥ng!");
            await fetchData(pagination.current, pagination.pageSize, keyword);
        } catch (error) {
            console.error(error);
            messageApi.error(
                error?.response?.data?.message || "‚ùå L·ªói khi x√≥a s√°ch!"
            );
        }
    };

    // === SUBMIT FORM (TH√äM HO·∫∂C C·∫¨P NH·∫¨T) ===
    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            const payload = {
                fullName: values.fullName,
                birthDate: values.birthDate?.format("YYYY-MM-DD"),
                nationality: values.nationality,
                biography: values.biography,
                email: values.email,
            };

            if (isEdit && editingRecord) {
                await bookService.update(editingRecord.id, payload);
                messageApi.success("‚úÖ C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!");
            } else {
                await bookService.create(payload);
                messageApi.success("‚úÖ Th√™m s√°ch th√†nh c√¥ng!");
            }

            await fetchData(pagination.current, pagination.pageSize, keyword);
            form.resetFields();
            setIsModalOpen(false);
        } catch (error) {
            console.error(error);
            messageApi.error(
                error?.response?.data?.message || "‚ùå L·ªói khi l∆∞u s√°ch!"
            );
        }
    };

    // === C·ªòT B·∫¢NG ===
    const columns = [
        { title: "ID", dataIndex: "id", key: "id", width: 80 },
        { title: "T√™n s√°ch", dataIndex: "title", key: "title" },
        { title: "ISBN", dataIndex: "isbn", key: "isbn" },
        { title: "NƒÉm xu·∫•t b·∫£n", dataIndex: "publishYear", key: "publishYear", width: 120 },
        { title: "Ng√¥n ng·ªØ", dataIndex: "language", key: "language", width: 100 },
        {
            title: "S·ªë l∆∞·ª£ng",
            dataIndex: "quantity",
            key: "quantity",
            width: 100,
            align: "center",
        },
        {
            title: "Gi√° (VNƒê)",
            dataIndex: "price",
            key: "price",
            width: 120,
            align: "right",
        },
        {
            title: "H√†nh ƒë·ªông",
            key: "action",
            width: 180,
            render: (_, record) => (
                <Space>
                    <Button
                        type="link"
                        icon={<EditOutlined />}
                        onClick={() => handleEdit(record)}
                    >
                        S·ª≠a
                    </Button>
                    <Popconfirm
                        title="X√°c nh·∫≠n xo√°?"
                        onConfirm={() => handleDelete(record.id)}
                        okText="X√≥a"
                        cancelText="H·ªßy"
                    >
                        <Button danger type="link" icon={<DeleteOutlined />}>
                            X√≥a
                        </Button>
                    </Popconfirm>
                </Space>
            ),
        },
    ];

    return (
        <div>
            {contextHolder} {/* ‚úÖ B·∫Øt bu·ªôc c√≥ d√≤ng n√†y */}
            <Space
                style={{
                    marginBottom: 16,
                    justifyContent: "space-between",
                    width: "100%",
                }}
            >
                <Search
                    placeholder="T√¨m ki·∫øm s√°ch..."
                    allowClear
                    enterButton="T√¨m ki·∫øm"
                    onSearch={handleSearch}
                    style={{ width: 300 }}
                />
                <Button type="primary" icon={<PlusOutlined />} onClick={handleAdd}>
                    Th√™m s√°ch
                </Button>
            </Space>

            <Table
                rowKey="id"
                columns={columns}
                dataSource={data}
                loading={loading}
                pagination={{
                    current: pagination.current,
                    pageSize: pagination.pageSize,
                    total: pagination.total,
                    showSizeChanger: true,
                    showTotal: (total) => `T·ªïng ${total} s√°ch`,
                    onChange: (page, pageSize) =>
                        fetchData(page, pageSize, keyword),
                }}
            />

            <Modal
                title={isEdit ? "C·∫≠p nh·∫≠t s√°ch" : "Th√™m s√°ch"}
                open={isModalOpen}
                onCancel={() => setIsModalOpen(false)}
                onOk={handleSubmit}
                okText="L∆∞u"
                cancelText="H·ªßy"
                destroyOnClose={true}
            >
                <Form form={form} layout="vertical">
                    <Form.Item
                        name="fullName"
                        label="T√™n s√°ch"
                        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n" }]}
                    >
                        <Input />
                    </Form.Item>
                    <Form.Item
                        name="birthDate"
                        label="Ng√†y sinh"
                        rules={[{ required: true, message: "Ch·ªçn ng√†y sinh" }]}
                    >
                        <DatePicker style={{ width: "100%" }} />
                    </Form.Item>
                    <Form.Item name="nationality" label="Qu·ªëc t·ªãch">
                        <Input />
                    </Form.Item>
                    <Form.Item name="biography" label="Ti·ªÉu s·ª≠">
                        <Input.TextArea rows={3} />
                    </Form.Item>
                    <Form.Item name="email" label="Email">
                        <Input type="email" />
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    );
}
